import{a,h as u,m as l}from"./chunk-MXDAFLWT.js";var c=class{constructor(t,e){this.http=t;this.entityClass=e}entityClass;url(){return l.api}createBody(t){let e=[];for(let n=0;n<t[1].length;n++){let i="string";switch(typeof t[1][n]){case"number":i="int";break;case"string":i="string";break;case"boolean":i="int";break;default:i="string"}e.push({type:i,value:`${t[1][n]}`})}return{sql:t[0],params:e,term_ip:"192.168.1.11",service:""}}getQueryBuilder(){return new u(new this.entityClass)}_getOrPaginate(t,e,r,n){let i=this.getQueryBuilder();t&&t.forEach(s=>{for(let o in s)if(Object.prototype.hasOwnProperty.call(s,o)){let y=s[o];y!=null&&i.where({[o]:y})}}),Number.isInteger(r)&&r!==null&&r!==void 0&&(n&&(r=r*n),i.limit(r,n)),e&&i.order(e);let h=this.createBody(i.buildParameterized());return this.http.post(this.url(),h).then(s=>{if(!Array.isArray(s))throw new Error("Invalid response from Service.");return a.createFromList(this.entityClass,s)})}find(t){let e=this.getQueryBuilder(),r=new this.entityClass().getPrimaryKeyName();e.where({[r]:t}).limit(1);let n=this.createBody(e.buildParameterized());return this.http.post(this.url(),n).then(i=>{if(!Array.isArray(i))throw new Error("Invalid response from Service.");return a.create(this.entityClass,i[0])})}get(t,e){return this._getOrPaginate(t,e)}paginate(t,e,r=1,n=100){return this._getOrPaginate(t,e,r,n)}create(t){let e=this.getQueryBuilder().insert(t).buildParameterized();return this.http.post(this.url(),this.createBody(e)).then(r=>a.create(this.entityClass,r))}update(t){let e=this.getQueryBuilder().update(t).buildParameterized();return this.http.post(this.url(),this.createBody(e)).then(r=>a.create(this.entityClass,r))}delete(t){let e=this.getQueryBuilder().delete(t).buildParameterized();return this.http.post(this.url(),this.createBody(e))}};export{c as a};
